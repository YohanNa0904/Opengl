#include <GL/glut.h> 

GLfloat rtri = 0.0f; 


void InitGL(int width, int height) {
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f); 
    glClearDepth(1.0f);                  
    glEnable(GL_DEPTH_TEST);            
    glDepthFunc(GL_LEQUAL);             
    glShadeModel(GL_SMOOTH);            
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f); 
    glMatrixMode(GL_MODELVIEW);
}

void ReSizeGLScene(int width, int height) {
    if (height == 0) height = 1; 
    glViewport(0, 0, width, height); 
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);
    glMatrixMode(GL_MODELVIEW);
}

int DrawGLScene(GLvoid) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    glLoadIdentity();                                  
    glTranslatef(-1.5f, 0.0f, -6.0f);                  
    glRotatef(rtri, 0.0f, 1.0f, 0.0f);                

    
    glBegin(GL_TRIANGLES);
    // 앞면
    glColor3f(1.0f, 0.0f, 0.0f); glVertex3f(0.0f, 1.0f, 0.0f);  
    glColor3f(0.0f, 1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, 1.0f); 
    glColor3f(0.0f, 0.0f, 1.0f); glVertex3f(1.0f, -1.0f, 1.0f);  
    // 오른쪽 면
    glColor3f(1.0f, 0.0f, 0.0f); glVertex3f(0.0f, 1.0f, 0.0f); 
    glColor3f(0.0f, 0.0f, 1.0f); glVertex3f(1.0f, -1.0f, 1.0f);
    glColor3f(0.0f, 1.0f, 0.0f); glVertex3f(1.0f, -1.0f, -1.0f);
    // 뒷면
    glColor3f(1.0f, 0.0f, 0.0f); glVertex3f(0.0f, 1.0f, 0.0f);
    glColor3f(0.0f, 1.0f, 0.0f); glVertex3f(1.0f, -1.0f, -1.0f);
    glColor3f(0.0f, 0.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);
    // 왼쪽 면
    glColor3f(1.0f, 0.0f, 0.0f); glVertex3f(0.0f, 1.0f, 0.0f);    
    glColor3f(0.0f, 0.0f, 1.0f); glVertex3f(-1.0f, -1.0f, -1.0f);)
    glColor3f(0.0f, 1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, 1.0f); 
    glEnd();

    glutSwapBuffers(); 
    return 1;
}

void UpdateRotation(int value) {
    rtri += 0.2f;
    if (rtri > 360.0f) rtri -= 360.0f;
    glutPostRedisplay();
    glutTimerFunc(16, UpdateRotation, 0); 
}

int main(int argc, char** argv) {
    glutInit(&argc, argv); 
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH); 
    glutInitWindowSize(640, 480); 
    glutInitWindowPosition(100, 100); 
    glutCreateWindow("3D Pyramid"); 

    InitGL(640, 480); 
    glutDisplayFunc(DrawGLScene); 
    glutReshapeFunc(ReSizeGLScene);
    glutTimerFunc(0, UpdateRotation, 0); 

    glutMainLoop();
    return 0;
}

// 이 피라미드 코드를 아래와 같이 변환

#include <GL/glut.h> 

GLfloat rotationAngle = 0.0f; 
GLfloat translateX = 0.0f;    
GLfloat translateY = 0.0f;    
GLfloat scale = 1.0f;         

void InitGL(int width, int height) {
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f); 
    glEnable(GL_DEPTH_TEST);             
    glMatrixMode(GL_PROJECTION);         
    glLoadIdentity();
    gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f); 
    glMatrixMode(GL_MODELVIEW);
}

void ReSizeGLScene(int width, int height) {
    if (height == 0) height = 1;        
    glViewport(0, 0, width, height);     
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);
    glMatrixMode(GL_MODELVIEW);
}

void DrawGLScene() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    glLoadIdentity();
    glTranslatef(0.0f, 0.0f, -6.0f); 

    
    glTranslatef(translateX, translateY, 0.0f); 
    glRotatef(rotationAngle, 0.0f, 1.0f, 0.0f); 
    glScalef(scale, scale, scale);              

   
    glBegin(GL_TRIANGLES);
    
    glColor3f(1.0f, 0.0f, 0.0f); glVertex3f(0.0f, 1.0f, 0.0f);  
    glColor3f(0.0f, 1.0f, 0.0f); glVertex3f(-1.0f, -1.0f, 1.0f); 
    glColor3f(0.0f, 0.0f, 1.0f); glVertex3f(1.0f, -1.0f, 1.0f); 
    glEnd();

    glutSwapBuffers(); 
}

void HandleKeyboard(unsigned char key, int x, int y) {
    switch (key) {
    case 'a': translateX -= 0.1f; break; 
    case 'd': translateX += 0.1f; break; 
    case 'w': translateY += 0.1f; break; 
    case 's': translateY -= 0.1f; break; 
    case '+': scale += 0.1f; break;      
    case '-': scale -= 0.1f; break;      
    }
    glutPostRedisplay(); 
}


void UpdateRotation(int value) {
    rotationAngle += 1.0f; 
    if (rotationAngle > 360.0f) rotationAngle -= 360.0f; 
    glutPostRedisplay(); 
    glutTimerFunc(16, UpdateRotation, 0); 
}


int main(int argc, char** argv) {
    glutInit(&argc, argv); 
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH); 
    glutInitWindowSize(640, 480); 
    glutInitWindowPosition(100, 100); 
    glutCreateWindow("Simple 3D Transformations"); 

    InitGL(640, 480); 
    glutDisplayFunc(DrawGLScene);
    glutReshapeFunc(ReSizeGLScene); 
    glutKeyboardFunc(HandleKeyboard);
    glutTimerFunc(16, UpdateRotation, 0); 

    glutMainLoop(); 
    return 0;
}
//glTranslawtef(translateX,translateY, 0.0f) 모델을 X축과 Y축 방향으로 이동.
//glRotatef(rotationAngle, 0.0f, 1.0f, 0.0f) Y축을 기준으로 모델을 rotationAngle 만큼 회전
//glScalef(scale, scale, scale) 모델을 scale 배율로 크기 조정
//case 'w','a','s','d' x,y 축 이동 제어
//case '+','-' 크기 확대 및 축소
// rotationAngle 값을 증가시켜 피라미드가 지속적으로 회전하도록 설정
//glutTimerFunc()를 통해 60FPS로 애니메이션 실행
